// Generated by view binder compiler. Do not edit!
package com.gdscsc.mybaby.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.gdscsc.mybaby.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LogListItemBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView dateDay;

  @NonNull
  public final TextView dateDayNum;

  @NonNull
  public final TextView dateMonth;

  @NonNull
  public final TextView tvDpChangeLog;

  @NonNull
  public final TextView tvNursingLog;

  @NonNull
  public final TextView tvSleepLog;

  private LogListItemBinding(@NonNull FrameLayout rootView, @NonNull TextView dateDay,
      @NonNull TextView dateDayNum, @NonNull TextView dateMonth, @NonNull TextView tvDpChangeLog,
      @NonNull TextView tvNursingLog, @NonNull TextView tvSleepLog) {
    this.rootView = rootView;
    this.dateDay = dateDay;
    this.dateDayNum = dateDayNum;
    this.dateMonth = dateMonth;
    this.tvDpChangeLog = tvDpChangeLog;
    this.tvNursingLog = tvNursingLog;
    this.tvSleepLog = tvSleepLog;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LogListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LogListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.log_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LogListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dateDay;
      TextView dateDay = ViewBindings.findChildViewById(rootView, id);
      if (dateDay == null) {
        break missingId;
      }

      id = R.id.dateDayNum;
      TextView dateDayNum = ViewBindings.findChildViewById(rootView, id);
      if (dateDayNum == null) {
        break missingId;
      }

      id = R.id.dateMonth;
      TextView dateMonth = ViewBindings.findChildViewById(rootView, id);
      if (dateMonth == null) {
        break missingId;
      }

      id = R.id.tvDpChangeLog;
      TextView tvDpChangeLog = ViewBindings.findChildViewById(rootView, id);
      if (tvDpChangeLog == null) {
        break missingId;
      }

      id = R.id.tvNursingLog;
      TextView tvNursingLog = ViewBindings.findChildViewById(rootView, id);
      if (tvNursingLog == null) {
        break missingId;
      }

      id = R.id.tvSleepLog;
      TextView tvSleepLog = ViewBindings.findChildViewById(rootView, id);
      if (tvSleepLog == null) {
        break missingId;
      }

      return new LogListItemBinding((FrameLayout) rootView, dateDay, dateDayNum, dateMonth,
          tvDpChangeLog, tvNursingLog, tvSleepLog);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
